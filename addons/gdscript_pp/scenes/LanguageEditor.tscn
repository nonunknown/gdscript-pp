[gd_scene load_steps=6 format=2]

[ext_resource path="res://addons/gdscript_pp/scripts/LanguageEditor.gd" type="Script" id=1]
[ext_resource path="res://addons/gdscript_pp/font/AnonymousPro-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://addons/gdscript_pp/scripts/CodeEditor.gd" type="Script" id=3]
[ext_resource path="res://addons/gdscript_pp/scenes/Output.gd" type="Script" id=4]

[sub_resource type="DynamicFont" id=1]
font_data = ExtResource( 2 )

[node name="LanguageEditor" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Main" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="Main"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextEdit" type="TextEdit" parent="Main/VBoxContainer"]
margin_right = 1024.0
margin_bottom = 350.0
rect_min_size = Vector2( 0, 350 )
size_flags_vertical = 3
custom_fonts/font = SubResource( 1 )
text = "extends KinematicBody2D
class_name Monocycle

enum STATES {move,jump,die,turbo}

signal base_speed_changed
signal turbo_start
signal turbo_finish

export var normal_speed:float = 200.0 
export var turbo_speed:float = 400.0
export var jump_force:float = 350.0
onready var initial_jump_force = jump_force

export var stream_on_grounded:AudioStream
export var stream_jump:AudioStream
export var stream_turbo:AudioStream

var _input:float = 0
var _smooth_input:float = 0
var _is_grounded:bool = true
var _velocity:Vector2
var _target_mono_pich:float = 1
var _is_dead:bool = false
var _do_turbo:bool = false

var timer:Timer = Timer.new()
var state_machine:StateMachine = StateMachine.new(self)

var speed:float = 0
onready var tweenMono:Tween = $tween_mono
onready var sfx_mono:AudioStreamPlayer2D = $sfx_mono
onready var particle_flare:Particles2D = $p_flare
onready var anim:AnimatedSprite = $AnimatedSprite

#debug stuff

func increase_base_speed(by:float) -> void:
	speed += by
	normal_speed += by
	turbo_speed += by
	emit_signal(\"base_speed_changed\")
	pass


#onready var turbo = get_tree().get_nodes_in_group(\"TURBO\")[0]

#end debug


# GODOT MAIN FUNCS

func _ready() -> void:
	speed = normal_speed
	print(speed)
	print(normal_speed)
	print(turbo_speed)
	timer.one_shot = true
	add_child(timer)
	state_machine.register_states(STATES)
	state_machine.start()
	timer.connect(\"timeout\",self,\"on_turbo_finished\")
	

func _physics_process(delta: float) -> void:
	
	velocity.x = speed
	state_machine.machine_update(delta)
	
	Draw.variable[\"speed\"] = speed
	Draw.variable[\"state\"] = STATES.keys()[state_machine.get_current_state()]


### - CONDITIONS
func cd_move() -> void:
	if is_grounded && not state_machine.state_is(STATES.move):
		state_machine.change_state(STATES.move)
	pass

func cd_jump() -> void:
	if (Input.is_action_just_pressed(\"cmd_jump\")) && is_grounded:
		state_machine.change_state(STATES.jump)
	pass

func force_jump(amt:float=0.0):
	if is_dead: return
	if amt > 0:
		jump_force = amt
	state_machine.change_state(STATES.jump)
#### - STATES


# MOVE ======================

export var stream_move:AudioStream
var playing_move:bool =false
func on_move_sound_finished():
	if input != 0: return
	playing_move = false

func st_init_move() -> void:
	anim.play(\"move\")
	pass

func st_update_move(delta:float) -> void:
	cd_jump()
	_movement()
	

func st_exit_move() -> void:
	sfx_mono.pitch_scale = 1
	pass

# END MOVE ########################



# JUMP ======================

var jump_y:float
var first:bool = false
func st_init_jump() -> void:
	anim.play(\"jump\")
	$AnimationPlayer.play(\"squash\")
	Sfx.play(Sfx.Type.POSITIONAL_2D,self,stream_jump,0,rand_range(.8,1.3))
	is_grounded = false
	jump_y = global_position.y
	print(\"entered jump\")
	first = true
	_ground_col_enabled(false)
	pass

func st_update_jump(delta:float) -> void:
	cd_move()
	if first:
		first = false
		velocity.y = -jump_force
		jump_force = initial_jump_force
	velocity = move_and_slide(velocity,Vector2.UP)
	velocity.y += 1000 * delta
	
	if global_position.y >= jump_y:
		is_grounded = true
		Sfx.play(Sfx.Type.POSITIONAL_2D,self,stream_on_grounded,0,rand_range(.8,1.3))
		
		global_position.y = jump_y
	pass

func st_exit_jump() -> void:
	_ground_col_enabled(true)
	$AnimationPlayer.play_backwards(\"squash\")
	pass


func st_init_die() -> void:
	is_dead = true
	$AnimatedSprite.rotation_degrees = 0
	$AnimatedSprite/mono_light.emitting = false
	$AnimatedSprite/mono_light2.emitting = false
	$GroundShape.call_deferred(\"set_disabled\",true)
	$CheckHole/CollisionShape2D.call_deferred(\"set_disabled\",true)
	
	$AnimatedSprite/Light2D.enabled = false
	
	
	get_tree().get_nodes_in_group(\"CAM\")[0].centralized = true
	sfx_mono.playing = false
	Utils.reset_scene()
	
	pass

func st_update_die(delta:float) -> void:
	velocity.y = 0
	
	if speed > 0:
		speed -= delta * 350
	else:
		speed = 0
		
	velocity = move_and_slide(velocity,Vector2.UP)


func st_exit_die() -> void:
	
	pass

func st_init_turbo() -> void:
	emit_signal(\"turbo_start\")
	if timer.is_stopped():
		timer.wait_time = 1
		timer.start()
		speed = turbo_speed
	else:
		timer.wait_time = 1
		timer.start()
	$AnimatedSprite/SpriteTrail.active = true
	Sfx.play(Sfx.Type.POSITIONAL_2D,self,stream_turbo,-3,rand_range(.8,1.3))
	
	$AnimatedSprite.play(\"turbo\")
	
	
	pass

func st_update_turbo(delta:float) -> void:
	_movement()
	cd_jump()
	cd_move()
	pass

func st_exit_turbo() -> void:
	
	pass

func on_turbo_finished() -> void:
	speed = normal_speed
	$AnimatedSprite/SpriteTrail.active = false
	$AnimatedSprite.play(\"move\")
	emit_signal(\"turbo_finish\")

# END JUMP ############################


# CUSTOM PUBLIC METHODS


const ps_monocycle = preload(\"res://objects/tmnt/obj_tmnt_alone_monocycle.tscn\")

func action_die(death_type:String):
	if !is_dead: is_dead = true
	else: return
#	remove_from_group(\"DYNAMIC_Z\")
	state_machine.change_state(STATES.die)
	
	match death_type:
		\"shock\":
			var inst = ps_monocycle.instance()
			get_parent().call_deferred(\"add_child\",inst)
			inst.fly = false
			inst.global_position = global_position - Vector2(0,400)
			anim.play(death_type)
			
		\"explode\":
			var inst = ps_monocycle.instance()
			get_parent().call_deferred(\"add_child\",inst)
			inst.global_position = global_position - Vector2(0,400)
			anim.play(death_type)
			pass
		\"hole\":
			$AnimationPlayer.play(\"die_hole\")
	pass

func action_turbo():
	state_machine.change_state(STATES.turbo)

func get_speed() -> float:
	return velocity.x

func get_speed_normalized() -> float:
	var result:float = 0
	
	result = velocity.x / turbo_speed
	
	return result

func force_fast_foward() -> void:
#	state_machine.change_state(STATES.turbo) #UNCOMMENT BELOW AND REMOVE THIS LINE
	speed = turbo_speed + 100
	Utils.wait_and_call(self,.5,\"restore_normal_speed\")
	pass

func restore_normal_speed():
	speed = normal_speed
# CUSTOM PRIVATE METHODS

func _ground_col_enabled(enabled:bool) -> void:
	$GroundShape.set_deferred(\"disabled\",!enabled)
	pass

func _movement():
	
	input = int(Input.is_action_pressed(\"ui_down\")) - int(Input.is_action_pressed(\"ui_up\"))
	
	global_position.y = clamp(global_position.y,580,666)
	if input != 0:
		target_mono_pich = 1.5
		if !playing_move:
			playing_move = true
			Sfx.play(Sfx.Type.POSITIONAL_2D,self,stream_move,-3,rand_range(.8,1.3),\"on_move_sound_finished\")
	else:
		target_mono_pich = 1
	sfx_mono.pitch_scale = lerp(sfx_mono.pitch_scale,target_mono_pich,.2)
	smooth_input = lerp(smooth_input,input,.2)
	velocity.y = smooth_input * 300
	velocity = move_and_slide(velocity,Vector2.UP)
	if input > 0:
		$AnimatedSprite.rotation_degrees = lerp($AnimatedSprite.rotation_degrees,15,.1)
	elif input < 0:
		$AnimatedSprite.rotation_degrees = lerp($AnimatedSprite.rotation_degrees,-50,.1)
	else:
		$AnimatedSprite.rotation_degrees = lerp($AnimatedSprite.rotation_degrees,-10,.3)
		
#	print($AnimatedSprite.rotation_degrees)
	pass


# SIGNAL RELATED METHODS


func _on_Area2D_body_entered(body: Node) -> void:
#	action_die(\"hole\")
	while !is_grounded:
		yield(get_tree(),\"idle_frame\")
	if is_grounded and !exited:
		action_die(\"hole\")


var exited:bool = false
func _on_CheckHole_body_exited(body: Node) -> void:
	exited = true
"
highlight_current_line = true
syntax_highlighting = true
show_line_numbers = true
draw_tabs = true
breakpoint_gutter = true
fold_gutter = true
highlight_all_occurrences = true
virtual_keyboard_enabled = false
smooth_scrolling = true
minimap_draw = true
caret_blink = true
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="te_output" type="TextEdit" parent="Main/VBoxContainer"]
margin_top = 354.0
margin_right = 1024.0
margin_bottom = 566.0
rect_min_size = Vector2( 0, 100 )
size_flags_vertical = 11
readonly = true
highlight_current_line = true
syntax_highlighting = true
show_line_numbers = true
highlight_all_occurrences = true
override_selected_font_color = true
virtual_keyboard_enabled = false
smooth_scrolling = true
wrap_enabled = true
minimap_draw = true
script = ExtResource( 4 )

[node name="Contents" type="Panel" parent="Main/VBoxContainer"]
margin_top = 570.0
margin_right = 1024.0
margin_bottom = 600.0
rect_min_size = Vector2( 0, 30 )

[node name="HBoxContainer" type="HBoxContainer" parent="Main/VBoxContainer/Contents"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="bt_output" type="Button" parent="Main/VBoxContainer/Contents/HBoxContainer"]
margin_right = 57.0
margin_bottom = 30.0
mouse_default_cursor_shape = 2
text = "Output"
flat = true

[node name="VSeparator" type="VSeparator" parent="Main/VBoxContainer/Contents/HBoxContainer"]
margin_left = 61.0
margin_right = 65.0
margin_bottom = 30.0

[node name="bt_convert" type="Button" parent="Main/VBoxContainer/Contents/HBoxContainer"]
margin_left = 69.0
margin_right = 130.0
margin_bottom = 30.0
mouse_default_cursor_shape = 2
text = "Convert"
flat = true

[node name="Generated" type="Control" parent="."]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0

[node name="CPP" type="TextEdit" parent="Generated"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -512.0
custom_fonts/font = SubResource( 1 )
readonly = true
highlight_current_line = true
syntax_highlighting = true
show_line_numbers = true
draw_tabs = true
breakpoint_gutter = true
fold_gutter = true
highlight_all_occurrences = true
virtual_keyboard_enabled = false
smooth_scrolling = true
minimap_draw = true
caret_blink = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HPP" type="TextEdit" parent="Generated"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 512.0
custom_fonts/font = SubResource( 1 )
readonly = true
highlight_current_line = true
syntax_highlighting = true
show_line_numbers = true
draw_tabs = true
breakpoint_gutter = true
fold_gutter = true
highlight_all_occurrences = true
virtual_keyboard_enabled = false
smooth_scrolling = true
minimap_draw = true
caret_blink = true
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="text_changed" from="Main/VBoxContainer/TextEdit" to="Main/VBoxContainer/TextEdit" method="_on_TextEdit_text_changed"]
[connection signal="pressed" from="Main/VBoxContainer/Contents/HBoxContainer/bt_output" to="." method="_on_bt_output_pressed"]
[connection signal="pressed" from="Main/VBoxContainer/Contents/HBoxContainer/bt_convert" to="." method="_on_bt_convert_pressed"]
